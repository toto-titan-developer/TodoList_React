{"version":3,"sources":["Todo.js","Todolist.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","toggleTodo","className","type","checked","complete","onChange","id","name","Todolist","todos","map","key","App","useState","setTodos","todoNameRef","useRef","useEffect","console","log","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","newTodos","find","ref","onClick","e","current","value","prevTodos","uuidv4","filter","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qRAmBeA,MAhBf,YAAqC,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WAIlB,OACI,6BACI,2BAAOC,UAAU,WACb,8BACA,2BAAOA,UAAU,QAAQC,KAAK,WAAWC,QAASJ,EAAKK,SAAUC,SAP7E,WACIL,EAAWD,EAAKO,OAOR,2BAAIP,EAAKQ,MACT,iCCFDC,MARf,YAA0C,IAAtBC,EAAqB,EAArBA,MAAOT,EAAc,EAAdA,WACvB,OACGS,EAAMC,KAAI,SAAAX,GACN,OAAO,kBAAC,EAAD,CAAMY,IAAKZ,EAAKO,GAAIN,WAAYA,EAAYD,KAAMA,Q,cCwDrDa,MAtDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNJ,EADM,KACCK,EADD,KAEPC,EAAcC,mBAiCpB,OA/BAC,qBAAU,WACRC,QAAQC,IAAI,2CACZ,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QARtB,kBASlBJ,GAAaN,EAASM,KACzB,IAEHH,qBAAU,WACRM,aAAaE,QAbS,gBAakBJ,KAAKK,UAAUjB,MACtD,CAACA,IAwBF,oCACE,yBAAKR,UAAU,WACf,yBAAKA,UAAU,QACf,kBAAC,EAAD,CAAUQ,MAAOA,EAAOT,WAzB5B,SAAoBM,GAClB,IAAMqB,EAAQ,YAAOlB,GACfV,EAAO4B,EAASC,MAAK,SAAA7B,GAAI,OAAIA,EAAKO,KAAOA,KAC/CP,EAAKK,UAAYL,EAAKK,SACtBU,EAASa,MAsBP,yBAAK1B,UAAU,WACb,8BACA,2BAAOA,UAAU,WAAW4B,IAAKd,EAAab,KAAK,SACnD,4BAAQD,UAAU,UAAU6B,QAtBlC,SAAuBC,GACrB,IAAMxB,EAAOQ,EAAYiB,QAAQC,MACpB,KAAT1B,IACJO,GAAS,SAAAoB,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAsB,CAAC5B,GAAI6B,cAAU5B,KAAMA,EAAMH,UAAU,QAE7DW,EAAYiB,QAAQC,MAAQ,QAgBxB,YACA,4BAAQhC,UAAU,UAAU6B,QAdlC,WACE,IAAMH,EAAWlB,EAAM2B,QAAO,SAAA3B,GAAK,OAAKA,EAAML,YAC9CU,EAASa,KAYL,mBACA,+BAEF,yBAAK1B,UAAU,YAAW,uBAAGA,UAAU,WAAWQ,EAAM2B,QAAO,SAAArC,GAAI,OAAKA,EAAKK,YAAUiC,QAAvF,eACA,yBAAKpC,UAAU,QACf,4BAAQA,UAAU,aC7CJqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.85e05349.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Todos.css';\r\n\r\nfunction Todo({ todo, toggleTodo }) {\r\n    function handleTodoClick() {\r\n        toggleTodo(todo.id)\r\n    }\r\n    return (\r\n        <div>           \r\n            <label className=\"gridbox\">\r\n                <div></div>\r\n                <input className=\"check\" type=\"checkbox\" checked={todo.complete} onChange={handleTodoClick}/>\r\n                <p>{todo.name}</p>\r\n                <div></div>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\nimport Todo from './Todo';\r\n\r\nfunction Todolist({ todos, toggleTodo }) {\r\n    return (\r\n       todos.map(todo => {\r\n           return <Todo key={todo.id} toggleTodo={toggleTodo} todo={todo} />\r\n       })         \r\n    )\r\n}\r\n\r\nexport default Todolist;","import React, { useState, useRef , useEffect} from 'react';\nimport Todolist from './Todolist';\nimport {v4 as uuidv4} from 'uuid';\nimport './App.css';\n\n\nconst LOCAL_STORAGE_KEY = 'todoApp.todos';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const todoNameRef = useRef();\n\n  useEffect(() => {\n    console.log(\"Bottom  :  Photo by Umberto on Unsplash\");\n    const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storedTodos) setTodos(storedTodos)\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  function toggleTodo(id) {\n    const newTodos = [...todos];\n    const todo = newTodos.find(todo => todo.id === id);\n    todo.complete = !todo.complete;\n    setTodos(newTodos);\n  }\n\n  function handleAddTodo(e) {\n    const name = todoNameRef.current.value;\n    if (name === '') return\n    setTodos(prevTodos => {\n      return [...prevTodos, {id: uuidv4(), name: name, complete: false}]\n    });\n    todoNameRef.current.value = null;\n  }\n\n  function handleClearTodos() {\n    const newTodos = todos.filter(todos => !todos.complete);\n    setTodos(newTodos);\n  }\n\n  return (\n    <>\n      <nav className=\"header\"></nav>\n      <div className=\"bkg\"></div>\n      <Todolist todos={todos} toggleTodo={toggleTodo}/>\n      <div className=\"gridBox\">\n        <div></div>\n        <input className=\"inputBox\" ref={todoNameRef} type=\"text\" />\n        <button className=\"button1\" onClick={handleAddTodo}>Add Todo</button>\n        <button className=\"button2\" onClick={handleClearTodos}>Clear Completed</button>\n        <div></div>\n      </div>\n      <div className=\"leftTodo\"><p className=\"leftNum\">{todos.filter(todo => !todo.complete).length}</p> Left To do</div>\n      <div className=\"bkg\"></div>\n      <footer className=\"footer\"></footer>\n    </>   \n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}